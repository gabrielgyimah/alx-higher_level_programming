	Divide Matrix
=============================
Using '''matrix_divided'''
-----------------------------


>>> matrix_divided = __import__('2-matrix_divided').matrix_divided


>>> matrix_divided([], 0)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[6, 10], [4, 8]], 2)
[[3.0, 5.0], [2.0, 4.0]]


>>> matrix_divided([[3, 6], [7, 8]], 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

>>> matrix_divided([[4, 9, 10, 4], [5, 7, 8, 9]], "7")
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided(3, 5)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[7, 9, 8, 4], [2, 1, 5]], 3)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([67, 30, 25], 9)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(None, 4)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(True, 10)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided()
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided(4)
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix_divided([[4, 8, 4], [2, 10, 14], None], 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[3, 9, 12], [18, 21, '24']], 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

